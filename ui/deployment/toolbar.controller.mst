/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import { Client } from '@stomp/stompjs';
import { NotificationCountService } from "../services/notification-count-service";
import { NotificationItem } from "../notifications/model/notifications.model";

export class ToolbarController {
    AuthStatusService: any;
    RestApi: any;
    $mdSidenav: any;
    $mdUtil: any;
    $state: any;
    $window: any;
    $location: any;
    unreadNotifications: any;
    title: any;
    menu: any;
    admin: any;
    toggleLeft: any;
    activePage: any;
    activePageName: any;

    feedbackOpen: boolean = false;
    accountMenuOpen: boolean = false;

    whiteColor: string = "#FFFFFF";
    greenColor: string = "#39b54a";

    accountMenuBackground: any = this.makeColor('background-color', this.greenColor);
    accountMenuIconColor: any = this.makeColor('color', this.whiteColor);

    feedbackMenuBackground: any = this.makeColor('background-color', this.greenColor);
    feedbackMenuIconColor: any = this.makeColor('color', this.whiteColor);

    constructor($mdSidenav,
                $mdUtil,
                RestApi,
                $state,
                $window,
                $location,
                AuthStatusService,
                $scope,
                public NotificationCountService: NotificationCountService) {
        this.AuthStatusService = AuthStatusService;
        this.RestApi = RestApi;
        this.$mdSidenav = $mdSidenav;
        this.$mdUtil = $mdUtil;
        this.$state = $state;
        this.$window = $window;
        this.$location = $location;

        $scope.$on('$mdMenuClose', (event, menu) => {
            if (menu[0].id === 'account') {
                this.updateAccountColors();
                this.accountMenuOpen = false;
            }
        });

        this.unreadNotifications = [];
        this.title = 'StreamPipes';


        this.AuthStatusService.userInfo = {
            Name: 'D',
            Avatar: null
        };

        this.menu = [
            {
                link: 'streampipes',
                title: 'Home',
                icon: 'action:ic_home_24px'
            },
            {{#modulesActive}}
            {{^admin}}
            {
                link: '{{{link}}}',
                title: '{{{title}}}',
                icon: '{{{icon}}}'
            },
            {{/admin}}
            {{/modulesActive}}
        ];

        this.admin = [
            {{#modulesActive}}
            {{#admin}}
            {
                link: '{{{link}}}',
                title: '{{{title}}}',
                icon: '{{{icon}}}'
            },
            {{/admin}}
            {{/modulesActive}}
        ];

    }

    $onInit() {
        this.toggleLeft = this.buildToggler('left');
        this.activePage = this.$state.current.name;
        this.activePageName = this.getPageTitle(this.activePage);
        this.NotificationCountService.loadUnreadNotifications();
        this.connectToBroker();
    }


    authenticated() {
        return this.AuthStatusService.authenticated;
    }

    go(path, payload?) {
        if (payload === undefined) {
            this.$state.go(path);
            this.activePage = path;
            this.$mdSidenav('left').close();
        } else {
            this.$state.go(path, payload);
            this.activePage = path;
        }
        this.activePageName = this.getPageTitle(this.activePage);
    };

    logout() {
        this.RestApi.logout().then(() => {
            this.AuthStatusService.user = undefined;
            this.AuthStatusService.authenticated = false;
            this.$state.go('login');
        });
    };

    openDocumentation() {
        this.$window.open('https://streampipes.apache.org/docs', '_blank');
    };

    openInfo() {
        this.$state.go("streampipes.info");
        this.activePage = "Info";
    }

    isActivePage(path) {
        return (this.$state.current.name == path);
    }

    getListItemClassName(path) {
        return this.isActivePage(path) ? "sp-navbar-item-selected" : "sp-navbar-item";
    }

    getIconClassName(path) {
        return this.isActivePage(path) ? "sp-navbar-icon-selected" : "sp-navbar-icon";
    }

    getPageTitle(path) {
        var allMenuItems = this.menu.concat(this.admin);
        var currentTitle = 'StreamPipes';
        allMenuItems.forEach(m => {
            if (m.link === path) {
                currentTitle = m.title;
            }
        });
        if (path == 'streampipes.pipelineDetails') {
            currentTitle = 'Pipeline Details';
        } else if (path == 'streampipes.edit') {
            currentTitle = this.menu[0].title;
        }
        return currentTitle;
    }

    buildToggler(navID) {
        var debounceFn = this.$mdUtil.debounce(() => {
            this.$mdSidenav(navID)
                .toggle();
        }, 300);
        return debounceFn;
    }

    getActivePage() {
        return this.activePage;
    }

    connectToBroker() {
        var login = 'admin';
        var passcode = 'admin';
        var websocketProtocol = this.$location.protocol() === "http" ? "ws" : "wss";
        var brokerUrl = websocketProtocol + '://' + this.$location.host() + ':' + this.$location.port() + '/streampipes/ws';
        var inputTopic = '/topic/org.apache.streampipes.notifications.' + this.AuthStatusService.email;

        let stompClient = new Client({
            brokerURL: brokerUrl,
            connectHeaders: {
                login: login,
                passcode: passcode
            },
            reconnectDelay: 5000
        });

        stompClient.onConnect = (frame) => {

            stompClient.subscribe(inputTopic, message => {
                this.NotificationCountService.increaseNotificationCount(JSON.parse(message.body) as NotificationItem);
            });
        };

        stompClient.activate();
    }

    triggerAccountMenu($mdMenu, $event) {
        this.updateAccountColors();
        this.accountMenuOpen = true;
        $mdMenu.open($event)
    }

    updateAccountColors() {
        this.accountMenuBackground = this.getNewColor('background-color', this.accountMenuBackground);
        this.accountMenuIconColor = this.getNewColor('color', this.accountMenuIconColor);
    }

    updateFeedbackColors() {
        this.feedbackMenuBackground = this.getNewColor('background-color', this.feedbackMenuBackground);
        this.feedbackMenuIconColor = this.getNewColor('color', this.feedbackMenuIconColor);
    }

    getNewColor(type: string, currentColor: any) {
        return currentColor[type] == this.greenColor ? this.makeColor(type, this.whiteColor) : this.makeColor(type, this.greenColor);
    }

    makeColor(type: string, color: string) {
        return {[type]: color};
    }

    toggleFeedback() {
        this.feedbackOpen = !this.feedbackOpen;
        this.updateFeedbackColors();
    }

    closeFeedbackWindow() {
        this.updateFeedbackColors();
        this.feedbackOpen = false;
    }

};

ToolbarController.$inject = ['$mdSidenav',
    '$mdUtil',
    'RestApi',
    '$state',
    '$window',
    '$location',
    'AuthStatusService',
    '$scope',
    'NotificationCountService'];