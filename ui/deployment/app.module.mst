/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

'use strict';

import * as angular from 'angular';

//import "jquery-ui";

import '@uirouter/angular-hybrid';
import 'angular-animate';

import spServices from './services/services.module';

import spCore from './core/core.module';
import spLayout from './layout/layout.module';
import spLogin from './login/login.module';
import spAppLinks from './applinks/applinks.module';
import spPipelineDetails from './pipeline-details/pipeline-details.module';
import { SpButtonDirective } from "./core/button/button.directive";
import mdThemingProviderConfig from "./core/md-theming-provider.config";
import rootScopeDelegate from "./core/root-scope-delegate.decorator";

{{#modulesActive}}
{{^ng5}}
import {{module}} from '{{{path}}}';
{{/ng5}}
{{/modulesActive}}

const MODULE_NAME = 'streamPipesApp';

export const Ng1AppModule = angular
    .module(MODULE_NAME, [
        spServices,
        spCore,
        spLayout,
        spLogin,
        spAppLinks,
        spPipelineDetails,
        'ui.router',
        'ui.router.upgrade',
        'ngAnimate',
        {{#modulesActive}}
        {{^ng5}}
        {{module}},
        {{/ng5}}
        {{/modulesActive}}
    ])
    .decorator('$rootScope', rootScopeDelegate)
    .config(['$urlServiceProvider', ($urlService) => $urlService.deferIntercept()])
    .run(["$rootScope", "$transitions", "TransitionService", "RouteTransitionInterceptorService",
        function ($rootScope, $transitions, TransitionService, RouteTransitionInterceptorService) {
            $transitions.onBefore({}, transition => {
              return RouteTransitionInterceptorService.onTransitionStarted(transition);
            });
            $transitions.onStart({}, transition => {
                return TransitionService.onTransitionStarted(transition);
            });
            //window['loading_screen'].finish();
    }])
    .config(mdThemingProviderConfig)
    .directive("spButton", ['$mdButtonInkRipple', '$mdTheming', '$mdAria', '$mdInteraction', ($mdButtonInkRipple, $mdTheming, $mdAria, $mdInteraction) => new SpButtonDirective($mdButtonInkRipple, $mdTheming, $mdAria, $mdInteraction)]);